{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc8e7aa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "from sklearn.metrics import accuracy_score,precision_score,recall_score, f1_score, confusion_matrix\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import lightgbm as lgb\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from feature_engine import imputation as mdi\n",
    "from feature_engine import encoding as ce\n",
    "import mean_median2 as mm\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "from pathlib import Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "50ae1726",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_path():\n",
    "    cur_path = os.getcwd()\n",
    "    parent_path = os.path.dirname(cur_path)\n",
    "    return cur_path, parent_path\n",
    "\n",
    "\n",
    "def file_path(data_path, file):\n",
    "    return os.path.abspath(os.path.join(data_path, f'{file}'))\n",
    "\n",
    "\n",
    "def df_write(data_path, df, file):\n",
    "    df = df.copy()\n",
    "    df.to_csv(os.path.abspath(os.path.join(data_path, file)), index=False)\n",
    "\n",
    "\n",
    "def split_train_test(df, configs):\n",
    "    df = df.copy()\n",
    "    X = df.drop(columns=configs['y_col'][0])\n",
    "    y = df[configs['y_col'][0]]\n",
    "    # X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=configs['y_col'][0])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)\n",
    "    return X_train, X_test, y_train, y_test\n",
    "\n",
    "\n",
    "def model_selection(option='logic'):\n",
    "    if option == 'light':\n",
    "        return lgb.LGBMClassifier(random_state=0)\n",
    "    else:\n",
    "        return LogisticRegression(random_state=0)\n",
    "\n",
    "\n",
    "def read_data(configs):\n",
    "    if configs['date_col'][0] is np.nan:\n",
    "        df = pd.read_csv(configs['file_name'][0])\n",
    "    else:\n",
    "        df = pd.read_csv(configs['file_name'][0], parse_dates=configs['date_col'])\n",
    "\n",
    "    if configs['remove_col'][0] == ' ':\n",
    "        pass\n",
    "    else:\n",
    "        remove_cols = configs['remove_col'][0].split(',')\n",
    "        for rc in remove_cols:\n",
    "            if rc in df.columns.to_list():\n",
    "                df = df.drop(rc, axis=1)\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "def y_label_enc(df, configs):\n",
    "    df = df.copy()\n",
    "    Y_col = configs['y_col'][0]\n",
    "    if df[Y_col].isnull().any():\n",
    "        Y_null = True\n",
    "    else:\n",
    "        Y_null = False\n",
    "    labeler = LabelEncoder()\n",
    "    df[Y_col] = labeler.fit_transform(df[Y_col])\n",
    "    return df, Y_null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ad130424",
   "metadata": {},
   "outputs": [],
   "source": [
    "def organize_data(df, configs, y_null):\n",
    "    df = df.copy()\n",
    "    cols = df.columns.to_list()\n",
    "    null_threshhold_cols = []\n",
    "    no_null_cols = []\n",
    "    if configs['date_col'][0] is np.nan:\n",
    "        date_exist = False\n",
    "        date_time = []\n",
    "    else:\n",
    "        date_exist = True\n",
    "        date_time = configs['date_col']\n",
    "\n",
    "    Y_col = configs['y_col'][0]\n",
    "\n",
    "    for col in cols:\n",
    "        null_mean = df[col].isnull().mean()\n",
    "        if null_mean >= configs['null_threshhold'][0]:\n",
    "            null_threshhold_cols.append(col)\n",
    "        if null_mean == 0:\n",
    "            no_null_cols.append(col)\n",
    "\n",
    "    cols_stayed = [item for item in cols if item not in null_threshhold_cols]\n",
    "    data = df[cols_stayed].copy()\n",
    "\n",
    "    # numerical: discrete vs continuous\n",
    "    if date_exist:\n",
    "        discrete = [var for var in cols_stayed if\n",
    "                    data[var].dtype != 'O' and var != Y_col and var not in date_time and data[var].nunique() < 10]\n",
    "        continuous = [var for var in cols_stayed if\n",
    "                      data[var].dtype != 'O' and var != Y_col and var not in date_time and var not in discrete]\n",
    "    else:\n",
    "        discrete = [var for var in cols_stayed if\n",
    "                    data[var].dtype != 'O' and var != Y_col and data[var].nunique() < 10]\n",
    "        continuous = [var for var in cols_stayed if\n",
    "                      data[var].dtype != 'O' and var != Y_col and var not in discrete]\n",
    "\n",
    "    # categorical\n",
    "    categorical = [var for var in cols_stayed if data[var].dtype == 'O' and var != Y_col]\n",
    "\n",
    "    print('There are {} date_time variables'.format(len(date_time)))\n",
    "    print('There are {} discrete variables'.format(len(discrete)))\n",
    "    print('There are {} continuous variables'.format(len(continuous)))\n",
    "    print('There are {} categorical variables'.format(len(categorical)))\n",
    "\n",
    "    if y_null:\n",
    "        data = data[data[Y_col] != data[Y_col].max()].copy()\n",
    "    else:\n",
    "        data = data.copy()\n",
    "\n",
    "    return data, discrete, continuous, categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "23ac3e34",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_train_test(df, configs):\n",
    "    df = df.copy()\n",
    "    X = df.drop(columns=configs['y_col'][0])\n",
    "    y = df[configs['y_col'][0]]\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=configs['test_size'][0], random_state=0, stratify=y)\n",
    "    return X_train, X_test, y_train, y_test\n",
    "\n",
    "\n",
    "def make_imputer_pipe(continuous, discrete, categorical, null_impute_type=None):\n",
    "    numberImputer = continuous + discrete\n",
    "    categoricalImputer = categorical\n",
    "    \n",
    "    if null_impute_type is None:\n",
    "        pipe = []\n",
    "    else:\n",
    "        if (len(numberImputer) > 0) & (len(categoricalImputer) > 0):\n",
    "            pipe = Pipeline([\n",
    "                (\"imputer\",\n",
    "                 mm.MeanMedianImputer2(\n",
    "                     imputation_method=null_impute_type, variables=numberImputer),),\n",
    "    \n",
    "                ('imputer_cat',\n",
    "                 mdi.CategoricalImputer(variables=categoricalImputer)),\n",
    "    \n",
    "                ('categorical_encoder',\n",
    "                 ce.OrdinalEncoder(encoding_method='ordered',\n",
    "                                   variables=categoricalImputer))\n",
    "            ])\n",
    "        else:\n",
    "            if (len(numberImputer) > 0) & (len(categoricalImputer) == 0):\n",
    "                pipe = Pipeline([\n",
    "                    (\"imputer\",\n",
    "                     mm.MeanMedianImputer2(\n",
    "                         imputation_method=null_impute_type, variables=numberImputer),)\n",
    "                ])\n",
    "            else:\n",
    "                if (len(numberImputer) == 0) & (len(categoricalImputer) > 0):\n",
    "                    pipe = Pipeline([\n",
    "                        ('imputer_cat',\n",
    "                         mdi.CategoricalImputer(variables=categoricalImputer)),\n",
    "    \n",
    "                        ('categorical_encoder',\n",
    "                         ce.OrdinalEncoder(encoding_method='ordered',\n",
    "                                           variables=categoricalImputer))\n",
    "                    ])\n",
    "                else:\n",
    "                    pipe = []\n",
    "    return pipe\n",
    "\n",
    "\n",
    "def do_imputation(df, configs, pipe):\n",
    "    if pipe != []:\n",
    "        df = df.copy()\n",
    "        xtrain, xtest, y_train, y_test = make_train_test(df, configs)\n",
    "        \n",
    "        # pipe.fit(X_train, y_train)\n",
    "        pipe.fit(xtrain, y_train)\n",
    "        \n",
    "        X_train = pipe.transform(xtrain)\n",
    "        X_test = pipe.transform(xtest)\n",
    "\n",
    "        X_train[configs['y_col'][0]] = y_train        \n",
    "        X_train['split'] = 'train'\n",
    "        X_test[configs['y_col'][0]] = y_test\n",
    "        X_test['split'] = 'test'        \n",
    "        return pd.concat([X_train, X_test]).reset_index(drop=True)\n",
    "    else:\n",
    "        print('no pipe applied')\n",
    "        return df    \n",
    "\n",
    "\n",
    "def do_train(X_train, X_test, y_train, y_test, option):\n",
    "    X_train, X_test, y_train, y_test = X_train.copy(), X_test.copy(), y_train.copy(), y_test.copy()\n",
    "    model = model_selection(option)\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    metrics(y_test, y_pred, option)\n",
    "\n",
    "\n",
    "def min_max_scale(df):\n",
    "    df = df.copy()\n",
    "    scaler = MinMaxScaler()\n",
    "    scaler.fit(df)\n",
    "    return scaler.transform(df)\n",
    "\n",
    "\n",
    "def metrics(y_test, pred, option):\n",
    "    y_test = y_test.copy()\n",
    "    pred = pred.copy()\n",
    "    accuracy = round(accuracy_score(y_test, pred), 2)\n",
    "    precision = round(precision_score(y_test, pred), 2)\n",
    "    recall = round(recall_score(y_test, pred), 2)\n",
    "    f1 = round(f1_score(y_test, pred), 2)\n",
    "    print(option, \"f1 Ï†êÏàò:\", f1, \"Ï†ïÌôïÎèÑ:\", accuracy, \"Ï†ïÎ∞ÄÎèÑ:\", precision, \"Ïû¨ÌòÑÏú®:\", recall)\n",
    "    print(confusion_matrix(y_test, pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a94a8175",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Digitalship_PC\\pydev\\digitalship\\data/C:/Users/Digitalship_PC/pydev/digitalship/config\\MetroPT3(AirCompressor).csv\n"
     ]
    },
    {
     "ename": "OSError",
     "evalue": "[Errno 22] Invalid argument: 'C:\\\\Users\\\\Digitalship_PC\\\\pydev\\\\digitalship\\\\data/C:/Users/Digitalship_PC/pydev/digitalship/config\\\\MetroPT3(AirCompressor).csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[11], line 11\u001b[0m\n\u001b[0;32m      9\u001b[0m configs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile_name\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(parent, os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdata/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfolder_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m, configs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile_name\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m]))\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28mprint\u001b[39m(configs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile_name\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m---> 11\u001b[0m df_initial \u001b[38;5;241m=\u001b[39m read_data(configs)\n",
      "Cell \u001b[1;32mIn[4], line 36\u001b[0m, in \u001b[0;36mread_data\u001b[1;34m(configs)\u001b[0m\n\u001b[0;32m     34\u001b[0m     df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(configs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile_name\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m])\n\u001b[0;32m     35\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 36\u001b[0m     df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(configs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile_name\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m], parse_dates\u001b[38;5;241m=\u001b[39mconfigs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdate_col\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m     38\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m configs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mremove_col\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m     39\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\util\\_decorators.py:211\u001b[0m, in \u001b[0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    209\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    210\u001b[0m         kwargs[new_arg_name] \u001b[38;5;241m=\u001b[39m new_arg_value\n\u001b[1;32m--> 211\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\util\\_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[0;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[0;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[0;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[0;32m    330\u001b[0m     )\n\u001b[1;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:950\u001b[0m, in \u001b[0;36mread_csv\u001b[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[0;32m    935\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[0;32m    936\u001b[0m     dialect,\n\u001b[0;32m    937\u001b[0m     delimiter,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    946\u001b[0m     defaults\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdelimiter\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m\"\u001b[39m},\n\u001b[0;32m    947\u001b[0m )\n\u001b[0;32m    948\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[1;32m--> 950\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _read(filepath_or_buffer, kwds)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:605\u001b[0m, in \u001b[0;36m_read\u001b[1;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[0;32m    602\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[0;32m    604\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[1;32m--> 605\u001b[0m parser \u001b[38;5;241m=\u001b[39m TextFileReader(filepath_or_buffer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    607\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[0;32m    608\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1442\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[1;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[0;32m   1439\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1441\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1442\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_engine(f, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mengine)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1735\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[1;34m(self, f, engine)\u001b[0m\n\u001b[0;32m   1733\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[0;32m   1734\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m-> 1735\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m get_handle(\n\u001b[0;32m   1736\u001b[0m     f,\n\u001b[0;32m   1737\u001b[0m     mode,\n\u001b[0;32m   1738\u001b[0m     encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mencoding\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m   1739\u001b[0m     compression\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcompression\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m   1740\u001b[0m     memory_map\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmemory_map\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m),\n\u001b[0;32m   1741\u001b[0m     is_text\u001b[38;5;241m=\u001b[39mis_text,\n\u001b[0;32m   1742\u001b[0m     errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mencoding_errors\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstrict\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1743\u001b[0m     storage_options\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstorage_options\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m   1744\u001b[0m )\n\u001b[0;32m   1745\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1746\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:856\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    851\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m    852\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[0;32m    853\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[0;32m    854\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[0;32m    855\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[1;32m--> 856\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(\n\u001b[0;32m    857\u001b[0m             handle,\n\u001b[0;32m    858\u001b[0m             ioargs\u001b[38;5;241m.\u001b[39mmode,\n\u001b[0;32m    859\u001b[0m             encoding\u001b[38;5;241m=\u001b[39mioargs\u001b[38;5;241m.\u001b[39mencoding,\n\u001b[0;32m    860\u001b[0m             errors\u001b[38;5;241m=\u001b[39merrors,\n\u001b[0;32m    861\u001b[0m             newline\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    862\u001b[0m         )\n\u001b[0;32m    863\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    864\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[0;32m    865\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n",
      "\u001b[1;31mOSError\u001b[0m: [Errno 22] Invalid argument: 'C:\\\\Users\\\\Digitalship_PC\\\\pydev\\\\digitalship\\\\data/C:/Users/Digitalship_PC/pydev/digitalship/config\\\\MetroPT3(AirCompressor).csv'"
     ]
    }
   ],
   "source": [
    "folder_name = 'C:/Users/Digitalship_PC/pydev/digitalship/config' # sys.argv[1]\n",
    "config_file_name = 'argumet_metro.xlsx' #sys.argv[2]\n",
    "cur_path = os.getcwd()\n",
    "parent = os.path.abspath(os.path.join(cur_path, os.pardir))\n",
    "config_file = os.path.join(parent, os.path.join('config', f'{config_file_name}'))\n",
    "configs = pd.read_excel(config_file, header=None).set_index(0).T\n",
    "configs = configs.to_dict('list')\n",
    "ori_file_name = configs['file_name'][0].split('.')[0]\n",
    "configs['file_name'][0] = os.path.join(parent, os.path.join(f'data/{folder_name}', configs['file_name'][0]))\n",
    "print(configs['file_name'][0])\n",
    "df_initial = read_data(configs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fcc06ee",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
